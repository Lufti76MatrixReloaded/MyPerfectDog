package de.syntaxinstitut.doggy_guide.data.db

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import de.syntaxinstitut.doggy_guide.api.DogsApi
import kotlinx.coroutines.InternalCoroutinesApi
import kotlinx.coroutines.internal.synchronized

@Database(
    entities = [DogsApi::class],
    version = 1,
    exportSchema = false
    )
abstract class DogDatabase : RoomDatabase() {
    abstract fun getDogsDao(): DogsDao

    companion object{
    @Volatile
    private var instance: DogDatabase? = null
    private val LOCK = Any()
    operator fun getDogsDao invoke(context: Context)= instance?: synchronized(LOCK){
        instance?: createDatabase(context).also{instance = it}
    }

    private fun createDatabase(context: Context) =
        Room.databaseBuilder(
            context.applicationContext, DogDatabase::class.java,
            ).allowMainThreadQueries()
                .fallbackToDestructiveMigration()
                .build()
    }
}

private late init var INSTANCE: DogDatabase

fun getDatabase(context: Context): DogDatabase {
	synchronized(DogDatabase::class.java) {
		if (!::INSTANCE.isInitialized) {
			INSTANCE = Room.databaseBuilder(
					context.applicationContext,
					DogDatabase::class.java,
					"dogs_database"
			)
				.build()
		}
	}
	return INSTANCE
}
